const express = require('express');
const cors = require('cors');
const multer = require('multer');
const Groq = require('groq-sdk');
const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('uploads'));

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = 'uploads';
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir);
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ storage });

// Initialize Groq
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY
});

// Configure nodemailer with debug info
let transporter = null;
if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {
  console.log('Email config found:');
  console.log('EMAIL_USER:', process.env.EMAIL_USER);
  console.log('EMAIL_PASS length:', process.env.EMAIL_PASS ? process.env.EMAIL_PASS.length : 'undefined');
  
  try {
    transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com',
      port: 587,
      secure: false,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      },
      tls: {
        rejectUnauthorized: false
      }
    });
    console.log('Transporter created successfully');
  } catch (err) {
    console.error('Failed to create transporter:', err);
  }
} else {
  console.log('Email credentials not found in environment variables');
}

// Routes
app.get('/', (req, res) => {
  res.json({ message: 'Meeting Notes Summarizer API' });
});

// Upload and summarize transcript
app.post('/api/summarize', upload.single('transcript'), async (req, res) => {
  try {
    const { customPrompt } = req.body;
    let transcriptText = '';

    if (req.file) {
      transcriptText = fs.readFileSync(req.file.path, 'utf8');
    } else if (req.body.transcriptText) {
      transcriptText = req.body.transcriptText;
    } else {
      return res.status(400).json({ error: 'No transcript provided' });
    }

    const prompt = customPrompt || 
      'Summarize the following meeting transcript in a clear, structured format with key points and action items:';

    const completion = await groq.chat.completions.create({
      model: 'llama3-8b-8192',
      messages: [
        {
          role: 'system',
          content: 'You are a helpful assistant that summarizes meeting transcripts based on user instructions.'
        },
        {
          role: 'user',
          content: `${prompt}\n\nTranscript:\n${transcriptText}`
        }
      ],
      max_tokens: 1000,
      temperature: 0.7
    });

    const summary = completion.choices[0].message.content;

    // Keep uploaded files in uploads folder
    // if (req.file) {
    //   fs.unlinkSync(req.file.path);
    // }

    res.json({ summary });
  } catch (error) {
    console.error('Error summarizing transcript:', error);
    res.status(500).json({ error: 'Failed to summarize transcript' });
  }
});

// Send email with summary
app.post('/api/send-email', async (req, res) => {
  try {
    if (!transporter) {
      return res.status(503).json({ 
        error: 'Email service not configured. Please set EMAIL_USER and EMAIL_PASS in .env file with Gmail App Password.' 
      });
    }

    const { recipients, subject, summary } = req.body;

    if (!recipients || !summary) {
      return res.status(400).json({ error: 'Recipients and summary are required' });
    }

    const mailOptions = {
      from: `"Meeting Summarizer" <${process.env.EMAIL_USER}>`,
      to: recipients.join(', '),
      subject: subject || 'Meeting Summary',
      html: `
        <h2>Meeting Summary</h2>
        <div style="white-space: pre-wrap; font-family: Arial, sans-serif; line-height: 1.6;">
          ${summary.replace(/\n/g, '<br>')}
        </div>
        <br>
        <p><em>Generated by Meeting Notes Summarizer</em></p>
      `
    };

    await transporter.sendMail(mailOptions);
    res.json({ message: 'Email sent successfully' });
  } catch (error) {
    console.error('Error sending email:', error);
    res.status(500).json({ error: 'Failed to send email' });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
